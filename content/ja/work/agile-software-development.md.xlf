<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="./en/agile-software-development.md" source-language="en" target-language="ja" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">What it is</source>
<target xml:lang="ja" state="translated">それは何ですか</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en">A set of practices that emphasize iterative development cycles and self-organizing teams.
In contrast to waterfall-like projects where value is generated only at the very end of a project,
agile software development focuses on a continuous, incremental delivery of value and
evolutionary improvement of the process itself.</source>
<target xml:lang="ja" state="translated">反復開発サイクルと自己組織化チームを強調する一連のプラクティス。
プロジェクトの最後にしか価値が生まれないウォーターフォールのようなプロジェクトとは対照的に、
アジャイルなソフトウェア開発は、継続的かつ漸進的な価値の提供に焦点を当てています。
プロセス自体の進化的改善。</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">Problem it addresses</source>
<target xml:lang="ja" state="translated">対処する問題</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">Defining, communicating and understanding requirements for all stakeholders in a software project is very difficult, if not impossible.
Yet, customers want their software projects to be delivered on time, in good quality, on budget and on scope.
With its cyclical nature, agile software development enables continuous adaptation of requirements and
faster adaptation to all other circumstances as opposed to waterfall-like strategies.</source>
<target xml:lang="ja" state="translated">ソフトウェア プロジェクトのすべての利害関係者の要件を定義し、伝達し、理解することは、不可能ではないにしても非常に困難です。
それでも、顧客は、ソフトウェア プロジェクトが予定どおり、高品質、予算内、および範囲内で提供されることを望んでいます。
アジャイルなソフトウェア開発は、その周期的な性質により、要件の継続的な適応を可能にし、
滝のような戦略とは対照的に、他のすべての状況へのより迅速な適応。</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">How it helps</source>
<target xml:lang="ja" state="translated">どのように役立つか</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">Agile software development contains all the phases of traditional (waterfall-like) strategies,
like requirements engineering, planning, implementation, review, testing and delivery.
The biggest difference is that the whole time span of a software project is sliced into iterations, which each contain all those phases.
After each iteration, the created value can be reviewed with the customer and requirements can be adjusted towards the end goal.
Additionally the development team retrospects on which actions items to take in order to improve the process itself.</source>
<target xml:lang="ja" state="translated">アジャイル ソフトウェア開発には、従来の (滝のような) 戦略のすべてのフェーズが含まれています。
要件エンジニアリング、計画、実装、レビュー、テスト、配信など。
最大の違いは、ソフトウェア プロジェクトの全期間が反復に分割され、各反復にはこれらすべてのフェーズが含まれていることです。
各反復の後、作成された価値を顧客と一緒に確認し、要件を最終目標に向けて調整できます。
さらに、開発チームは、プロセス自体を改善するためにどのアクション アイテムを実行するかを振り返ります。</target>
</trans-unit>
</body>
</file>
</xliff>
