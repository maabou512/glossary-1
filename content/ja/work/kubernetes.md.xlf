<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="./en/kubernetes.md" source-language="en" target-language="ja" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">What it is</source>
<target xml:lang="ja" state="translated">それは何ですか</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en">Kubernetes, often abbreviated as K8s, is an open source container orchestrator.
It automates the lifecycle of containerized applications on modern infrastructures, functioning as a "datacenter operating system" that manages applications across a <x id="1"/>distributed system<x id="2"/>.</source>
<target xml:lang="ja" state="translated">K8s と略されることが多い Kubernetes は、オープン ソースのコンテナー オーケストレーターです。
<x id="1"/>分散システム<x id="2"/>全体でアプリケーションを管理する「データセンター オペレーティング システム」として機能し、最新のインフラストラクチャでコンテナ化されたアプリケーションのライフサイクルを自動化します。</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">Kubernetes schedules <x id="1"/>containers<x id="2"/> across <x id="3"/>nodes<x id="4"/> in a <x id="5"/>cluster<x id="6"/>, bundling several infrastructure resources such as load balancer, persistent storage, etc. to run containerized applications.</source>
<target xml:lang="ja" state="translated">Kubernetes は <x id="1"/>コンテナ<x id="2"/> を <x id="3"/>ノード<x id="4"/> で <x id="5"/>クラスター<x id="6"/>。ロード バランサー、永続ストレージなどの複数のインフラストラクチャ リソースをバンドルして、コンテナー化されたアプリケーションを実行します。</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">Kubernetes enables automation and extensibility, allowing users to deploy applications declaratively (see below) in a reproducible way.
Kubernetes is extensible via its <x id="1"/>API<x id="2"/>, allowing experienced Kubernetes practitioners to leverage its automation capabilities according to their needs.</source>
<target xml:lang="ja" state="translated">Kubernetes は自動化と拡張性を可能にし、ユーザーが再現可能な方法でアプリケーションを宣言的に展開できるようにします (以下を参照)。
Kubernetes は <x id="1"/>API<x id="2"/> を介して拡張できるため、経験豊富な Kubernetes 実践者はニーズに応じてその自動化機能を活用できます。</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">Problem it addresses</source>
<target xml:lang="ja" state="translated">対処する問題</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">Infrastructure automation and declarative configuration management have been important concepts for a long time, but they have become more pressing as <x id="1"/>cloud computing<x id="2"/> has gained popularity.
As demand for compute resources increases and organizations need to provide more operational capabilities with fewer engineers, new technologies and working methods are required to meet that demand.</source>
<target xml:lang="ja" state="translated">インフラストラクチャの自動化と宣言型構成管理は長い間重要な概念でしたが、<x id="1"/>クラウド コンピューティング<x id="2"/>の人気が高まるにつれて、より差し迫ったものになりました。
コンピューティング リソースの需要が高まり、組織はより少ないエンジニアでより多くの運用機能を提供する必要があるため、その需要を満たすために新しいテクノロジと作業方法が必要になります。</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">How it helps</source>
<target xml:lang="ja" state="translated">どのように役立つか</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">Similar to traditional <x id="1"/>infrastructure as code<x id="2"/> tools, Kubernetes helps with automation but has the advantage of working with containers.
Containers are more resistant to configuration drift than <x id="3"/>virtual<x id="4"/> or physical machines.</source>
<target xml:lang="ja" state="translated">従来の <x id="1"/>Infrastructure as Code<x id="2"/> ツールと同様に、Kubernetes は自動化に役立ちますが、コンテナを操作できるという利点があります。
コンテナは、<x id="3"/>仮想マシン<x id="4"/>または物理マシンよりも構成のずれに対する耐性があります。</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">Additionally, Kubernetes works declaratively, which means that instead of operators instructing the machine how to do something, they describe — usually as manifest files (e.g., YAML) — what the infrastructure should look like.
Kubernetes then takes care of the "how".
This results in Kubernetes being extremely compatible with infrastructure as code.</source>
<target xml:lang="ja" state="translated">さらに、Kubernetes は宣言的に動作します。つまり、オペレーターはマシンに何かを行う方法を指示する代わりに、通常はマニフェスト ファイル (YAML など) として、インフラストラクチャがどのように見えるべきかを記述します。
その後、Kubernetes が「方法」を処理します。
その結果、Kubernetes は Infrastructure as Code と非常に互換性があります。</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en">Kubernetes also <x id="1"/>self-heals<x id="2"/>.
The cluster's actual state will always match the operator's desired state.
If Kubernetes detects a deviation from what is described in the manifest files, a Kubernetes controller kicks in and fixes it.
While the infrastructure Kubernetes uses may be continually changing, Kubernetes constantly and automatically adapts to changes and ensures that it matches with the desired state.</source>
<target xml:lang="ja" state="translated">Kubernetes は<x id="1"/>自己修復機能も備えています<x id="2"/>。
クラスターの実際の状態は、常にオペレーターの望ましい状態と一致します。
Kubernetes がマニフェスト ファイルに記述されている内容からの逸脱を検出すると、Kubernetes コントローラーが起動して修正します。
Kubernetes が使用するインフラストラクチャは絶えず変化している可能性がありますが、Kubernetes は常に変化に自動的に適応し、望ましい状態と一致するようにします。</target>
</trans-unit>
</body>
</file>
</xliff>
