<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="./en/blue-green-deployment.md" source-language="en" target-language="ja" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">What it is</source>
<target xml:lang="ja" state="translated">それは何ですか</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en">Blue-green deployment is a strategy for updating running computer systems with minimal downtime.
The operator maintains two environments, dubbed “blue” and “green”.
One serves production traffic (the version all users are currently using), whilst the other is updated.
Once testing has concluded on the non-active (green) environment,
production traffic is switched over (often via the use of a <x id="1"/>load balancer<x id="2"/>).
Note that blue-green deployment usually means switching the entire environments, comprising many <x id="3"/>services<x id="4"/>, all at once.
Confusingly, sometimes the term is used with regard to individual services within a system.
To avoid this ambiguity, the term “zero-downtime deployment” is preferred when referring to individual components.</source>
<target xml:lang="ja" state="translated">Blue-Green デプロイメントは、実行中のコンピューター システムを最小限のダウンタイムで更新するための戦略です。
オペレーターは、「ブルー」と「グリーン」と呼ばれる 2 つの環境を維持します。
1 つは本番トラフィック (すべてのユーザーが現在使用しているバージョン) を提供し、もう 1 つは更新されます。
非アクティブ (グリーン) 環境でのテストが終了したら、
実稼働トラフィックが切り替えられます (多くの場合、<x id="1"/>ロード バランサー<x id="2"/> を使用します)。
通常、Blue-Green デプロイメントとは、多くの <x id="3"/>サービス<x id="4"/> で構成される環境全体を一度に切り替えることを意味することに注意してください。
紛らわしいことに、この用語はシステム内の個々のサービスに関して使用されることがあります。
このあいまいさを避けるために、個々のコンポーネントを指すときは「ゼロ ダウンタイム デプロイメント」という用語を使用することをお勧めします。</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">Problem it addresses</source>
<target xml:lang="ja" state="translated">対処する問題</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">Blue-green deployments allow minimal downtime when updating software that must be changed in "lockstep" owing to a lack of backwards compatibility.
For example, blue-green deployment would be appropriate for an online store
consisting of a website and a database that needs to be updated,
but the new version of the database doesn’t work with the old version of the website, and vice versa.
In this instance, both need to be changed at the same time.
If this was done on the production system, customers would notice downtime.</source>
<target xml:lang="ja" state="translated">Blue-Green デプロイメントでは、下位互換性がないために「ロックステップ」で変更する必要があるソフトウェアを更新する際のダウンタイムを最小限に抑えることができます。
たとえば、ブルー グリーン展開はオンライン ストアに適しています。
更新が必要なウェブサイトとデータベースで構成され、
しかし、新しいバージョンのデータベースは古いバージョンの Web サイトでは機能しません。その逆も同様です。
この場合、両方を同時に変更する必要があります。
これが本番システムで行われた場合、顧客はダウンタイムに気付くでしょう。</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">How it helps</source>
<target xml:lang="ja" state="translated">どのように役立つか</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">Blue-green deployment is an appropriate strategy for non-cloud native software that needs to be updated with minimal downtime.
However, its use is normally a "smell" that legacy software needs to be re-engineered so that components can be updated individually.</source>
<target xml:lang="ja" state="translated">Blue-Green デプロイメントは、最小限のダウンタイムで更新する必要がある非クラウド ネイティブ ソフトウェアに適した戦略です。
ただし、その使用は通常、コンポーネントを個別に更新できるように、レガシー ソフトウェアを再設計する必要があるという「におい」です。</target>
</trans-unit>
</body>
</file>
</xliff>
