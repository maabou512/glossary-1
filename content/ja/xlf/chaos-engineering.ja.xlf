<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="./en/chaos-engineering.md" source-language="en" target-language="ja" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">What it is</source>
<target xml:lang="ja" state="translated">それは何ですか</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en">Chaos Engineering or CE is the discipline of experimenting on a <x id="1"/>distributed system<x id="2"/> in production
to build confidence in the system's capability to withstand turbulent and unexpected conditions.</source>
<target xml:lang="ja" state="translated">カオス エンジニアリングまたは CE は、本番環境で<x id="1"/>分散システム<x id="2"/>を実験する分野です。
乱流や予期せぬ状況に耐えるシステムの能力に対する信頼を構築します。</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">Problem it addresses</source>
<target xml:lang="ja" state="translated">対処する問題</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en"><x id="1"/>SRE<x id="2"/> and <x id="3"/>DevOps<x id="4"/> practices focus on
techniques to increase product resiliency and <x id="5"/>reliability<x id="6"/>.
A system's ability to tolerate failures while ensuring adequate service quality is
typically a software development requirement.
There are several aspects involved that could lead to outages of an application,
like infrastructure, platform or other moving parts of a (<x id="7"/>microservice<x id="8"/>-based) application.
High-frequency deployment of new features to the production environment can
result in a high probability of downtime and a critical incident
— with considerable consequences to the business.</source>
<target xml:lang="ja" state="translated"><x id="1"/>SRE<x id="2"/> と <x id="3"/>DevOps<x id="4"/> プラクティスは、
製品の弾力性と<x id="5"/>信頼性<x id="6"/>を向上させる技術。
適切なサービス品質を確保しながら障害を許容するシステムの能力は、
通常、ソフトウェア開発要件です。
アプリケーションの停止につながる可能性のあるいくつかの側面があります。
インフラストラクチャ、プラットフォーム、または (<x id="7"/>マイクロサービス<x id="8"/> ベースの) アプリケーションのその他の可動部分など。
運用環境への新機能の高頻度展開は、
ダウンタイムと重大なインシデントの可能性が高くなります
— ビジネスに重大な結果をもたらします。</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">How it helps</source>
<target xml:lang="ja" state="translated">どのように役立つか</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">Chaos engineering is a technique to meet resilience requirements.
It is used to achieve resilience against infrastructure, platform, and application failures.
Chaos engineers use chaos experiments to proactively inject random failures
to verify that an application, infrastructure, or platform can self-heal and the failure cannot noticeably impact customers.
Chaos experiments aim to discover blind spots
(e.g. monitoring or autoscaling techniques) and to improve the communications between teams during critical incidents.
This approach helps increase resiliency and the team's confidence in complex systems, particularly production.</source>
<target xml:lang="ja" state="translated">カオス エンジニアリングは、レジリエンスの要件を満たすための手法です。
インフラストラクチャ、プラットフォーム、およびアプリケーションの障害に対する回復力を実現するために使用されます。
カオスエンジニアは、カオス実験を使用して、ランダムな障害を積極的に注入します
アプリケーション、インフラストラクチャ、またはプラットフォームが自己修復でき、障害が顧客に顕著な影響を与えないことを確認します。
カオス実験は死角の発見を目指す
(例: 監視または自動スケーリング技術) および重大なインシデント発生時のチーム間のコミュニケーションを改善します。
このアプローチは、回復力を高め、複雑なシステム、特に本番環境に対するチームの信頼を高めるのに役立ちます。</target>
</trans-unit>
</body>
</file>
</xliff>
