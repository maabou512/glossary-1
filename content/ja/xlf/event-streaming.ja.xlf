<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="./en/event-streaming.md" source-language="en" target-language="ja" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">What it is</source>
<target xml:lang="ja" state="translated">それは何ですか</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en">Event streaming is an approach where software sends event data from one application to another to continuously communicate what they are doing.
Picture a service broadcasting everything it does to all other services.
Each activity taken by a service is referred to as an event, hence event streaming.
For example, NASDAQ gets updates on stock and commodities pricing every second.
If you had an application that monitored a specific set of stocks, you would want to receive that information in near real-time.
Yahoo! Finance provides an <x id="1"/>API<x id="2"/> that pulls from NASDAQ and sends (or streams) the information (or events) from their application to any application that subscribes to it.
The data being sent as well as the changes in that data (stock prices) are the events while the process of delivering them to an application is event streaming.</source>
<target xml:lang="ja" state="translated">イベント ストリーミングは、ソフトウェアがアプリケーション間でイベント データを送信して、アプリケーションの動作を継続的に伝達するアプローチです。
サービスが行うすべてのことを他のすべてのサービスにブロードキャストするサービスを想像してみてください。
サービスによって実行される各アクティビティはイベントと呼ばれるため、イベント ストリーミングが行われます。
たとえば、NASDAQ では、株式と商品の価格に関する最新情報が毎秒取得されます。
特定の一連の株式を監視するアプリケーションがある場合、その情報をほぼリアルタイムで受け取りたいと思うでしょう。
ヤフー！ Finance は <x id="1"/>API<x id="2"/> を提供します。この API は、NASDAQ から取得し、情報 (またはイベント) をアプリケーションからサブスクライブする任意のアプリケーションに送信 (またはストリーミング) します。
送信されるデータとそのデータ (株価) の変化はイベントであり、それらをアプリケーションに配信するプロセスはイベント ストリーミングです。</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">Problem it addresses</source>
<target xml:lang="ja" state="translated">対処する問題</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">Traditionally, Yahoo! Finance would use single TCP requests.
This would be very inefficient as it would require a connection to be created for every event.
As data becomes more real-time in nature, scaling such a solution becomes inefficient.
Opening a connection once and allowing events to flow is ideal for real-time collection.
The amount of data being generated is growing exponentially and with that, the data state is in constant flux. Developers and users need to be able to see that data in near real-time.</source>
<target xml:lang="ja" state="translated">従来、Yahoo!金融は、単一の TCP 要求を使用します。
これは、イベントごとに接続を作成する必要があるため、非常に非効率的です。
データが本質的によりリアルタイムになるにつれて、そのようなソリューションのスケーリングは非効率的になります。
一度接続を開き、イベントが流れるようにすることは、リアルタイム収集に理想的です。
生成されるデータの量は指数関数的に増加しており、それに伴いデータの状態は常に変化しています。開発者とユーザーは、そのデータをほぼリアルタイムで確認できる必要があります。</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">How it helps</source>
<target xml:lang="ja" state="translated">どのように役立つか</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">Event streaming allows data changes to be communicated from source to receiver.
Instead of waiting for services to request information, the service continuously streams all its events (or activities).
It isn't concerned about what happens to the information.
It just does what it needs to do and broadcasts it, thus remaining completely independent of any other service.</source>
<target xml:lang="ja" state="translated">イベント ストリーミングにより、データの変更をソースからレシーバに伝達できます。
サービスが情報を要求するのを待つ代わりに、サービスはすべてのイベント (またはアクティビティ) を継続的にストリーミングします。
情報がどうなるかは気にしません。
必要なことを実行してブロードキャストするだけなので、他のサービスから完全に独立しています。</target>
</trans-unit>
</body>
</file>
</xliff>
