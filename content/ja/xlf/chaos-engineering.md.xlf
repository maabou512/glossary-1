<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="./en/chaos-engineering.md" source-language="en" target-language="ja" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">What it is</source>
<target xml:lang="ja">What it is</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en">Chaos Engineering or CE is the discipline of experimenting on a <x id="1"/>distributed system<x id="2"/> in production
to build confidence in the system's capability to withstand turbulent and unexpected conditions.</source>
<target xml:lang="ja">Chaos Engineering or CE is the discipline of experimenting on a <x id="1"/>distributed system<x id="2"/> in production
to build confidence in the system's capability to withstand turbulent and unexpected conditions.</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">Problem it addresses</source>
<target xml:lang="ja">Problem it addresses</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en"><x id="1"/>SRE<x id="2"/> and <x id="3"/>DevOps<x id="4"/> practices focus on
techniques to increase product resiliency and <x id="5"/>reliability<x id="6"/>.
A system's ability to tolerate failures while ensuring adequate service quality is
typically a software development requirement.
There are several aspects involved that could lead to outages of an application,
like infrastructure, platform or other moving parts of a (<x id="7"/>microservice<x id="8"/>-based) application.
High-frequency deployment of new features to the production environment can
result in a high probability of downtime and a critical incident
— with considerable consequences to the business.</source>
<target xml:lang="ja"><x id="1"/>SRE<x id="2"/> and <x id="3"/>DevOps<x id="4"/> practices focus on
techniques to increase product resiliency and <x id="5"/>reliability<x id="6"/>.
A system's ability to tolerate failures while ensuring adequate service quality is
typically a software development requirement.
There are several aspects involved that could lead to outages of an application,
like infrastructure, platform or other moving parts of a (<x id="7"/>microservice<x id="8"/>-based) application.
High-frequency deployment of new features to the production environment can
result in a high probability of downtime and a critical incident
— with considerable consequences to the business.</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">How it helps</source>
<target xml:lang="ja">How it helps</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">Chaos engineering is a technique to meet resilience requirements.
It is used to achieve resilience against infrastructure, platform, and application failures.
Chaos engineers use chaos experiments to proactively inject random failures
to verify that an application, infrastructure, or platform can self-heal and the failure cannot noticeably impact customers.
Chaos experiments aim to discover blind spots
(e.g. monitoring or autoscaling techniques) and to improve the communications between teams during critical incidents.
This approach helps increase resiliency and the team's confidence in complex systems, particularly production.</source>
<target xml:lang="ja">Chaos engineering is a technique to meet resilience requirements.
It is used to achieve resilience against infrastructure, platform, and application failures.
Chaos engineers use chaos experiments to proactively inject random failures
to verify that an application, infrastructure, or platform can self-heal and the failure cannot noticeably impact customers.
Chaos experiments aim to discover blind spots
(e.g. monitoring or autoscaling techniques) and to improve the communications between teams during critical incidents.
This approach helps increase resiliency and the team's confidence in complex systems, particularly production.</target>
</trans-unit>
</body>
</file>
</xliff>
