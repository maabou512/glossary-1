<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="./en/canary-deployment.md" source-language="en" target-language="ja" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">What it is</source>
<target xml:lang="ja" state="translated">それは何ですか</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en">Canary deployments is a deployment strategy that starts with two environments:
one with live traffic and the other containing the updated code without live traffic.
The traffic is gradually moved from the original version of the application to the updated version.
It can start by moving 1% of live traffic, then 10%, 25%, and so on,
until all traffic is running through the updated version.
Organizations can test the new version of the software in production, get feedback,
diagnose errors, and quickly rollback to the stable version if necessary.</source>
<target xml:lang="ja" state="translated">カナリア デプロイは、次の 2 つの環境から始まるデプロイ戦略です。
1 つはライブ トラフィックがあり、もう 1 つは更新されたコードを含み、ライブ トラフィックはありません。
トラフィックは、アプリケーションの元のバージョンから更新されたバージョンに徐々に移行されます。
ライブ トラフィックの 1% を移動することから始め、次に 10%、25% などを移動します。
すべてのトラフィックが更新されたバージョンを通過するまで。
組織は、本番環境でソフトウェアの新しいバージョンをテストし、フィードバックを取得し、
エラーを診断し、必要に応じて安定版にすばやくロールバックします。</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">The term “canary” refers to the "canary in a coal mine" practice
where canary birds were taken into coal mines to keep miners safe.
If odorless harmful gases were present, the bird would die, and the miners knew they had to evacuate quickly.
Similarly, if something goes wrong with the updated code, live traffic is "evacuated" back to the original version.</source>
<target xml:lang="ja" state="translated">「カナリア」という用語は、「炭鉱のカナリア」慣習を指します。
鉱山労働者の安全を守るためにカナリア鳥が炭鉱に連れてこられた場所。
無臭の有害ガスが存在する場合、鳥は死んでしまい、鉱山労働者はすぐに避難しなければならないことを知っていました.
同様に、更新されたコードに問題が発生した場合、ライブ トラフィックは元のバージョンに「退避」されます。</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">Problem it addresses</source>
<target xml:lang="ja" state="translated">対処する問題</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">No matter how thorough the testing strategy, there are always some bugs discovered in production.
Shifting 100% of traffic from one version of an app to another can lead to more impactful failures.</source>
<target xml:lang="ja" state="translated">テスト戦略がどれほど徹底的であっても、本番環境では常にいくつかのバグが発見されます。
アプリのあるバージョンから別のバージョンにトラフィックを 100% 移行すると、より影響の大きい障害が発生する可能性があります。</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">How it helps</source>
<target xml:lang="ja" state="translated">どのように役立つか</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">Canary deployments allow organizations to see how new software behaves in real-world scenarios
before moving significant traffic to the new version.
This strategy enables organizations to minimize downtime and quickly rollback in case of issues with the new deployment.
It also allows more in-depth production application testing without a significant impact on the overall user experience.</source>
<target xml:lang="ja" state="translated">カナリア展開により、組織は新しいソフトウェアが実際のシナリオでどのように動作するかを確認できます
大量のトラフィックを新しいバージョンに移行する前に。
この戦略により、組織はダウンタイムを最小限に抑え、新しい展開で問題が発生した場合に迅速にロールバックできます。
また、全体的なユーザー エクスペリエンスに大きな影響を与えることなく、より詳細な実稼働アプリケーションのテストを行うこともできます。</target>
</trans-unit>
</body>
</file>
</xliff>
