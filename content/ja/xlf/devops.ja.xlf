<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="./en/devops.md" source-language="en" target-language="ja" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">What it is</source>
<target xml:lang="ja" state="translated">それは何ですか</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en">DevOps is a methodology in which teams own the entire process from application development to production operations, hence DevOps.
It goes beyond implementing a set of technologies and requires a complete shift in culture and processes.
DevOps calls for groups of engineers that work on small components (versus an entire feature), decreasing handoffs – a common source of errors.</source>
<target xml:lang="ja" state="translated">DevOps は、チームがアプリケーション開発から本番運用までのプロセス全体を担当する方法論であり、DevOps です。
これは一連のテクノロジーを実装するだけではなく、文化とプロセスを完全に変える必要があります。
DevOps では、小さなコンポーネント (機能全体ではなく) に取り組むエンジニアのグループが必要であり、エラーの一般的な原因であるハンドオフが減少します。</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">Problem it addresses</source>
<target xml:lang="ja" state="translated">対処する問題</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">Traditionally, in complex organizations with <x id="1"/>tightly-coupled<x id="2"/> <x id="3"/>monolithic apps<x id="4"/>,
work was generally fragmented between multiple groups.
This led to numerous handoffs and long lead times.
Each time a component or update was ready, it was placed in a queue for the next team.
Because individuals only worked on one small piece of the project, this approach led to a lack of ownership.
Their goal was to get the work to the next group, not deliver the right functionality to the customer
— a clear misalignment of priorities.</source>
<target xml:lang="ja" state="translated">従来、<x id="1"/>密結合<x id="2"/> <x id="3"/>モノリシック アプリ<x id="4"/>を使用する複雑な組織、
作業は通常、複数のグループ間で断片化されていました。
これにより、多数のハンドオフと長いリードタイムが発生しました。
コンポーネントまたはアップデートの準備が整うたびに、次のチームのキューに入れられました。
個人はプロジェクトの 1 つの小さな部分にしか取り組んでいなかったため、このアプローチは所有権の欠如につながりました。
彼らの目標は、適切な機能を顧客に提供することではなく、次のグループに作業を渡すことでした
— 優先順位の明らかな不一致。</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">By the time code finally got into production, it went through so many developers,
waiting in so many queues that it was difficult to trace the origin of the problem if the code didn’t work.
DevOps turns this approach upside down.</source>
<target xml:lang="ja" state="translated">コードが最終的に本番環境に入るまでには、非常に多くの開発者を経て、
コードが機能しない場合、非常に多くのキューで待機していたため、問題の原因を追跡することが困難でした。
DevOps はこのアプローチをひっくり返します。</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">How it helps</source>
<target xml:lang="ja" state="translated">どのように役立つか</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">Having one team own the entire lifecycle of an application results in
minimized handoffs, reduce risk when deploying into production, better code quality
as teams are also responsible for how code performs in production
and increased employee satisfaction due to more autonomy and ownership.</source>
<target xml:lang="ja" state="translated">1 つのチームがアプリケーションのライフサイクル全体を所有すると、
ハンドオフの最小化、本番環境へのデプロイ時のリスクの軽減、コード品質の向上
チームは本番環境でコードがどのように機能するかについても責任を負うため
自律性と所有権が高まることで、従業員の満足度が向上します。</target>
</trans-unit>
</body>
</file>
</xliff>
