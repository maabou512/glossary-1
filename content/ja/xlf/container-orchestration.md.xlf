<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="./en/container-orchestration.md" source-language="en" target-language="ja" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">What it is</source>
<target xml:lang="ja">What it is</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Container<x id="2"/> orchestration refers to managing and automating the lifecycle of containerized applications in dynamic environments.
It's executed through a container orchestrator (in most cases, <x id="3"/>Kubernetes<x id="4"/>), which enables deployments, (auto)scaling, auto-healing, and monitoring.
Orchestration is a metaphor:
The orchestration tool conducts containers like a music conductor, ensuring every container (or musician) does what it should.</source>
<target xml:lang="ja"><x id="1"/>Container<x id="2"/> orchestration refers to managing and automating the lifecycle of containerized applications in dynamic environments.
It's executed through a container orchestrator (in most cases, <x id="3"/>Kubernetes<x id="4"/>), which enables deployments, (auto)scaling, auto-healing, and monitoring.
Orchestration is a metaphor:
The orchestration tool conducts containers like a music conductor, ensuring every container (or musician) does what it should.</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">Problem it addresses</source>
<target xml:lang="ja">Problem it addresses</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">Managing <x id="1"/>microservices<x id="2"/>, security, and network communication at scale — and <x id="3"/>distributed systems<x id="4"/> in general — is hard, if not impossible, to manage manually.
Container orchestration allows users to automate all these management tasks.</source>
<target xml:lang="ja">Managing <x id="1"/>microservices<x id="2"/>, security, and network communication at scale — and <x id="3"/>distributed systems<x id="4"/> in general — is hard, if not impossible, to manage manually.
Container orchestration allows users to automate all these management tasks.</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">How it helps</source>
<target xml:lang="ja">How it helps</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">Container orchestration tools allow users to determine a system's state.
First, they declare how it should look like (e.g., x containers, y pods, etc.).
The orchestration tool will then automatically monitor the infrastructure and correct it if its state deviates from the declared one (e.g., spin up a new container if one crashes).
This automation simplifies many of the engineering teams' otherwise highly manual and complex operational tasks, including provisioning, deployment, scaling (up and down), networking, load balancing, and other activities.</source>
<target xml:lang="ja">Container orchestration tools allow users to determine a system's state.
First, they declare how it should look like (e.g., x containers, y pods, etc.).
The orchestration tool will then automatically monitor the infrastructure and correct it if its state deviates from the declared one (e.g., spin up a new container if one crashes).
This automation simplifies many of the engineering teams' otherwise highly manual and complex operational tasks, including provisioning, deployment, scaling (up and down), networking, load balancing, and other activities.</target>
</trans-unit>
</body>
</file>
</xliff>
